// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IERC20 {
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function transfer(address recipient, uint256 amount) external returns (bool);
}

contract UniswapStaking {
    IERC20 public lpToken; // LP代币合约地址
    IERC20 public rewardToken; // 奖励代币合约地址
    uint256 public rewardRate; // 每秒奖励数量

    struct Stake {
        uint256 amount; // 质押数量
        uint256 rewardDebt; // 已结算奖励
    }

    mapping(address => Stake) public stakes;
    uint256 public lastUpdateTime;
    uint256 public rewardPerTokenStored;

    constructor(address _lpToken, address _rewardToken, uint256 _rewardRate) {
        lpToken = IERC20(_lpToken);
        rewardToken = IERC20(_rewardToken);
        rewardRate = _rewardRate;
    }

    function rewardPerToken() public view returns (uint256) {
        if (lpToken.totalSupply() == 0) {
            return rewardPerTokenStored;
        }
        return rewardPerTokenStored + (block.timestamp - lastUpdateTime) * rewardRate / lpToken.totalSupply();
    }

    function earned(address account) public view returns (uint256) {
        Stake memory stake = stakes[account];
        uint256 rewardPerToken_ = rewardPerToken();
        return stake.amount * (rewardPerToken_ - stake.rewardDebt) / 1e18;
    }

    function stake(uint256 amount) external {
        updateReward(msg.sender);
        lpToken.transferFrom(msg.sender, address(this), amount);
        stakes[msg.sender].amount += amount;
        stakes[msg.sender].rewardDebt = rewardPerToken();
    }

    function withdraw(uint256 amount) external {
        updateReward(msg.sender);
        stakes[msg.sender].amount -= amount;
        lpToken.transfer(msg.sender, amount);
        stakes[msg.sender].rewardDebt = rewardPerToken();
    }

    function claimReward() external {
        updateReward(msg.sender);
        uint256 reward = earned(msg.sender);
        if (reward > 0) {
            rewardToken.transfer(msg.sender, reward);
            stakes[msg.sender].rewardDebt = rewardPerToken();
        }
    }

    function updateReward(address account) internal {
        rewardPerTokenStored = rewardPerToken();
        lastUpdateTime = block.timestamp;
        if (account != address(0)) {
            stakes[account].rewardDebt = rewardPerTokenStored;
        }
    }

    // 其他必要的合约函数...
}